{"version":3,"sources":["scripts/classes/Cell.js","scripts/classes/Card.js","scripts/classes/Board.js","scripts/classes/StartButton.js","scripts/classes/ScoreCounter.js","scripts/classes/Advertisement.js","scripts/classes/Message.js","scripts/classes/EventHandler.js","scripts/main.js"],"names":["createCell","cell","i","x","BOARD_SIZE","y","Math","floor","wasMerged","isEmpty","linkCard","canMergeWith","cell2","weight","mergeWith","card","setWeight","setXY","remove","resetLinkedCard","playAnimation","ANIMATION_DURATION","createCard","random","document","createElement","style","setProperty","newWeight","className","classList","add","textContent","parentNode","removeChild","AnimationName","duration","animation","setTimeout","Array","WEIGHT_TO_WIN_GAME","Board","boardElement","scoreCounter","fillBoardThis","fillBoard","bind","addEventListener","allCells","querySelectorAll","length","push","forEach","emptyCells","filter","randomCell","resetLinkedCards","childNodes","child","contains","emptyCell","getRandomEmptyCell","undefined","appendChild","amount","spawnCard","direction","sort","cell1","Error","startCell","thisGroup","getGroupForCell","cellIndex","findIndex","target","cellWithCard","targetCoords","lastFreeCell","isCellOnPath","sortedCells","reverse","getCellForMerge","getCellForMove","cellsWithCard","needSpawn","scoresAmount","getCellsInOrder","targetCell","getTargetCell","continueGame","haveEmpty","haveTargetCell","StartButton","buttonElement","stopGame","startGame","HTMLelement","isRestart","setupEventListener","ScoreCounter","counterElement","recordElement","counter","record","localStorage","getItem","updateHTML","playAddScoreAnimation","value","setItem","Advertisement","setGameInfo","Message","messageElement","messageTextNode","querySelector","recordNode","counterNode","closeButton","tryAgainButton","closeMessageHandler","closeMessage","closeAndRestartHandler","closeAndRestart","won","messageText","removeEventListener","EventHandler","board","gameOverCallback","gameOver","handleTouchStart","handleTouchEnd","handleTouchMove","keyDownHandler","event","preventDefault","startX","changedTouches","screenX","startY","screenY","endX","endY","swipeHandler","deltaX","deltaY","key","gameContinue","swipe","abs","AD_NODE","SCORE_COUNT_NODE","SCORE_RECORD_NODE","MESSAGE_NODE","START_BUTTON_NODE","BOARD_NODE","startButton","message","eventHandler","advertisement","setAd","firstSpawn","toggle","start","reset","clear","stop","updateRecord","showMessage"],"mappings":"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","file":"main.27180f14.js","sourceRoot":"..\\src","sourcesContent":["import { BOARD_SIZE } from './Board';\n\nexport function createCell(cell, i) {\n  const x = i % BOARD_SIZE;\n  const y = Math.floor(i / BOARD_SIZE);\n\n  cell.x = x;\n  cell.y = y;\n  cell.wasMerged = false;\n\n  cell.isEmpty = function() {\n    return this.linkCard === null;\n  };\n\n  cell.canMergeWith = function(cell2) {\n    return !this.isEmpty() && !cell2.isEmpty()\n      && this.linkCard.weight === cell2.linkCard.weight\n      && !this.wasMerged; // this must be targetCell\n  };\n\n  cell.mergeWith = function(cell2) {\n    const card = this.linkCard;\n\n    cell.wasMerged = true;\n\n    card.setWeight(card.weight * 2);\n\n    cell2.linkCard.setXY(card.x, card.y);\n\n    cell2.linkCard.remove();\n    cell2.resetLinkedCard();\n\n    card.playAnimation('cardMerge');\n  };\n\n  cell.resetLinkedCard = function() {\n    this.linkCard = null;\n  };\n\n  cell.resetLinkedCard();\n\n  return cell;\n}\n","const ANIMATION_DURATION = 300;\n\nexport function createCard(weight = Math.random() < 0.1 ? 4 : 2) {\n  const card = document.createElement('div');\n\n  card.setXY = function(x, y) {\n    this.x = x;\n    this.y = y;\n\n    this.style.setProperty('--x', x);\n    this.style.setProperty('--y', y);\n  };\n\n  card.setWeight = function(newWeight) {\n    this.weight = newWeight;\n    card.className = '';\n    card.classList.add(`card`, `card--${newWeight}`);\n    card.textContent = newWeight;\n  };\n\n  card.remove = function() {\n    this.parentNode.removeChild(this);\n  };\n\n  card.playAnimation = function(AnimationName, duration = ANIMATION_DURATION) {\n    this.style.animation = `${AnimationName} ${duration}ms`;\n\n    setTimeout(() => {\n      this.style.animation = '';\n    }, duration);\n  };\n\n  card.setWeight(weight);\n\n  card.playAnimation('cardCreation');\n\n  return card;\n}\n","import { createCell } from './Cell';\nimport { createCard } from './Card';\n\nexport const BOARD_SIZE = 4;\n\nconst WEIGHT_TO_WIN_GAME = 2048;\n\nexport class Board extends Array {\n  constructor(boardElement, scoreCounter) {\n    super();\n\n    this.boardElement = boardElement;\n    this.scoreCounter = scoreCounter;\n\n    this.fillBoardThis = this.fillBoard.bind(this);\n    document.addEventListener('DOMContentLoaded', this.fillBoardThis);\n  }\n\n  fillBoard() {\n    const allCells = document.querySelectorAll('.cell');\n\n    for (let i = 0; i < allCells.length; i++) {\n      const cell = createCell(allCells[i], i);\n\n      this.push(cell);\n    }\n  };\n\n  resetLinkedCards() {\n    this.forEach(cell => {\n      cell.resetLinkedCard();\n    });\n  };\n\n  getRandomEmptyCell() {\n    const emptyCells = this.filter(cell => cell.isEmpty());\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const randomCell = emptyCells[randomIndex];\n\n    return randomCell;\n  };\n\n  clear() {\n    this.resetLinkedCards();\n\n    const cardsToRemove = [...this.boardElement.childNodes]\n      .filter(child => child.classList && child.classList.contains('card'));\n\n    cardsToRemove.forEach(card => {\n      this.boardElement.removeChild(card);\n    });\n  };\n\n  spawnCard() {\n    const emptyCell = this.getRandomEmptyCell();\n\n    if (emptyCell === undefined) {\n      return;\n    }\n\n    const card = createCard();\n\n    card.setXY(emptyCell.x, emptyCell.y);\n\n    emptyCell.linkCard = card;\n\n    this.boardElement.appendChild(card);\n  };\n\n  firstSpawn(amount = 1) {\n    for (let i = 0; i < amount; i++) {\n      this.spawnCard();\n    }\n  };\n\n  getGroupForCell(cell, direction) {\n    if (direction === 'Up' || direction === 'Down') {\n      return this\n        .filter(cell2 => cell.x === cell2.x)\n        .sort((cell1, cell2) => cell1.y - cell2.y);\n    }\n\n    if (direction === 'Left' || direction === 'Right') {\n      return this\n        .filter(cell2 => cell.y === cell2.y)\n        .sort((cell1, cell2) => cell1.x - cell2.x);\n    }\n\n    throw new Error('Error, in shift method you can use'\n      + 'only this value: Up, Down, Right, Left'\n    );\n  };\n\n  getCellForMerge(startCell, direction) {\n    const thisGroup = this.getGroupForCell(startCell, direction);\n\n    const cellIndex = thisGroup\n      .findIndex(cell => cell.y === startCell.y && cell.x === startCell.x);\n\n    switch (direction) {\n      case 'Up':\n        for (let y = cellIndex - 1; y >= 0; y--) {\n          const cell = thisGroup[y];\n\n          if (cell.isEmpty()) {\n            continue;\n          }\n\n          if (cell.canMergeWith(startCell)) {\n            return cell;\n          }\n          break;\n        } break;\n      case 'Down':\n        for (let y = cellIndex + 1; y < thisGroup.length; y++) {\n          const cell = thisGroup[y];\n\n          if (cell.isEmpty()) {\n            continue;\n          }\n\n          if (cell.canMergeWith(startCell)) {\n            return cell;\n          }\n          break;\n        } break;\n      case 'Left':\n        for (let x = cellIndex - 1; x >= 0; x--) {\n          const cell = thisGroup[x];\n\n          if (cell.isEmpty()) {\n            continue;\n          }\n\n          if (cell.canMergeWith(startCell)) {\n            return cell;\n          }\n          break;\n        } break;\n      case 'Right':\n        for (let x = cellIndex + 1; x < thisGroup.length; x++) {\n          const cell = thisGroup[x];\n\n          if (cell.isEmpty()) {\n            continue;\n          }\n\n          if (cell.canMergeWith(startCell)) {\n            return cell;\n          }\n          break;\n        } break;\n      default:\n        throw new Error('Error, in shift method you can use'\n          + 'only this value: Up, Down, Right, Left'\n        );\n    }\n\n    return null;\n  };\n\n  isCellOnPath(cell, target, direction) {\n    if (!cell.isEmpty()) {\n      return false;\n    }\n\n    switch (direction) {\n      case 'Up':\n        return cell.x === target.x && cell.y < target.y;\n      case 'Down':\n        return cell.x === target.x && cell.y > target.y;\n      case 'Left':\n        return cell.y === target.y && cell.x < target.x;\n      case 'Right':\n        return cell.y === target.y && cell.x > target.x;\n      default:\n        throw new Error('Error, in shift method you can use'\n          + 'only this value: Up, Down, Right, Left'\n        );\n    }\n  };\n\n  getCellForMove(cellWithCard, direction) {\n    let targetCoords = {\n      x: cellWithCard.x, y: cellWithCard.y,\n    };\n    let lastFreeCell = null;\n\n    for (const cell of this) {\n      if (this.isCellOnPath(cell, targetCoords, direction)) {\n        lastFreeCell = cell;\n\n        targetCoords = {\n          x: cell.x, y: cell.y,\n        };\n      }\n    }\n\n    return lastFreeCell;\n  };\n\n  getCellsInOrder(direction) {\n    const sortedCells = [...this];\n\n    switch (direction) {\n      case 'Up':\n        return sortedCells;\n      case 'Down':\n        return sortedCells.reverse();\n      case 'Left':\n        return sortedCells.sort((cell1, cell2) =>\n          cell1.y - cell2.y || cell1.x - cell2.x\n        );\n      case 'Right':\n        return sortedCells.sort((cell1, cell2) =>\n          cell1.y - cell2.y || cell2.x - cell1.x\n        );\n      default:\n        throw new Error('Error,'\n          + 'in getCellsInOrder method you can use'\n          + 'only this value: Up, Down, Right, Left'\n        );\n    }\n  };\n\n  getTargetCell(startCell, direction) {\n    return this.getCellForMerge(startCell, direction)\n      || this.getCellForMove(startCell, direction);\n  };\n\n  swipe(direction) {\n    const cellsWithCard = this\n      .getCellsInOrder(direction)\n      .filter(cell => !cell.isEmpty());\n    let needSpawn = false;\n    let scoresAmount = 0;\n\n    for (const cell of cellsWithCard) {\n      const targetCell = this.getTargetCell(cell, direction);\n\n      if (targetCell === null) {\n        continue;\n      }\n\n      needSpawn = true;\n\n      if (targetCell.canMergeWith(cell)) {\n        targetCell.mergeWith(cell);\n        scoresAmount += targetCell.linkCard.weight;\n\n        if (targetCell.linkCard.weight >= WEIGHT_TO_WIN_GAME) {\n          return 'Win';\n        }\n\n        continue;\n      }\n\n      const card = cell.linkCard;\n\n      card.setXY(targetCell.x, targetCell.y);\n      targetCell.linkCard = card;\n      cell.resetLinkedCard();\n    }\n\n    this.forEach(cell => {\n      cell.wasMerged = false;\n    });\n\n    if (scoresAmount > 0) {\n      this.scoreCounter.add(scoresAmount);\n    }\n\n    if (needSpawn) {\n      this.spawnCard();\n    }\n\n    return this.continueGame();\n  };\n\n  haveTargetCell(cell) {\n    if (this.getTargetCell(cell, 'Up')) {\n      return true;\n    }\n\n    if (this.getTargetCell(cell, 'Down')) {\n      return true;\n    }\n\n    if (this.getTargetCell(cell, 'Right')) {\n      return true;\n    }\n\n    if (this.getTargetCell(cell, 'Left')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  continueGame() {\n    const haveEmpty = this.getRandomEmptyCell() !== undefined;\n\n    if (haveEmpty) {\n      return 'continue';\n    }\n\n    for (const cell of this) {\n      if (this.haveTargetCell(cell)) {\n        return 'continue';\n      }\n    }\n\n    return 'Lose';\n  }\n}\n","export class StartButton {\n  constructor(buttonElement, stopGame, startGame) {\n    this.HTMLelement = buttonElement;\n    this.isRestart = false;\n\n    this.setupEventListener(stopGame, startGame);\n  }\n\n  setupEventListener(stopGame, startGame) {\n    this.HTMLelement.addEventListener('click', () => {\n      if (this.isRestart) {\n        stopGame();\n      } else {\n        startGame();\n      }\n    });\n  }\n\n  toggle() {\n    if (this.isRestart) {\n      this.HTMLelement.classList.remove('tile--button--restart');\n      this.HTMLelement.classList.add('tile--button--start');\n      this.HTMLelement.textContent = 'Start';\n    } else {\n      this.HTMLelement.classList.remove('tile--button--start');\n      this.HTMLelement.classList.add('tile--button--restart');\n      this.HTMLelement.textContent = 'Restart';\n    }\n\n    this.isRestart = !this.isRestart;\n  };\n}\n","export class ScoreCounter {\n  constructor(counterElement, recordElement) {\n    this.HTMLelement = counterElement;\n    this.recordElement = recordElement;\n\n    this.counter = 0;\n    this.record = localStorage.getItem('scoreRecord') || 0;\n\n    this.updateHTML();\n  }\n\n  updateHTML() {\n    this.HTMLelement.textContent = this.counter;\n    this.recordElement.textContent = this.record;\n  }\n\n  playAddScoreAnimation(amount) {\n    this.HTMLelement.style.setProperty('--amount', `'+${amount}'`);\n    this.HTMLelement.classList.add('game-score--before');\n\n    setTimeout(() => {\n      this.HTMLelement.classList.remove('game-score--before');\n    }, 500);\n  }\n\n  add(amount) {\n    this.counter += amount;\n\n    this.playAddScoreAnimation(amount);\n\n    this.updateHTML();\n  }\n\n  reset() {\n    this.counter = 0;\n    this.updateHTML();\n  }\n\n  updateRecord(value = this.counter) {\n    this.record = value;\n    localStorage.setItem('scoreRecord', value);\n  }\n}\n","export class Advertisement {\n  constructor(HTMLelement) {\n    this.HTMLelement = HTMLelement;\n\n    this.setGameInfo();\n  }\n\n  setGameInfo() {\n    this.HTMLelement.textContent = 'Press \"Start\" to start game';\n  }\n\n  setAd() {\n    this.HTMLelement.textContent = 'Your ad can be here';\n  }\n}\n","export class Message {\n  constructor(messageElement, scoreCounter, startGame, stopGame) {\n    this.messageElement = messageElement;\n    this.scoreCounter = scoreCounter;\n    this.startGame = startGame;\n    this.stopGame = stopGame;\n\n    this.className = this.messageElement.className;\n\n    this.messageTextNode = document.querySelector(`.${this.className}__text`);\n    this.recordNode = document.querySelector(`.${this.className}__record-val`);\n    this.counterNode = document.querySelector(`.${this.className}__score-val`);\n    this.closeButton = document.querySelector(`.${this.className}__close`);\n\n    this.tryAgainButton\n      = document.querySelector(`.${this.className}__try-again`);\n\n    this.closeMessageHandler = this.closeMessage.bind(this);\n    this.closeAndRestartHandler = this.closeAndRestart.bind(this);\n  }\n\n  showMessage(won) {\n    const messageText = won\n      ? 'Winner! Congrats! You did it!'\n      : 'You lose! Restart the game?';\n\n    this.messageElement.classList.add('show');\n\n    this.messageTextNode.textContent = messageText;\n    this.recordNode.textContent = this.scoreCounter.record;\n    this.counterNode.textContent = this.scoreCounter.counter;\n\n    this.tryAgainButton.addEventListener('click', this.closeAndRestartHandler);\n    this.closeButton.addEventListener('click', this.closeMessageHandler);\n  }\n\n  closeAndRestart() {\n    this.closeMessage();\n    this.stopGame();\n    this.startGame();\n  }\n\n  closeMessage() {\n    this.messageElement.classList.remove('show');\n\n    this.tryAgainButton.removeEventListener('click', this.closeMessageHandler);\n    this.closeButton.removeEventListener('click', this.closeMessageHandler);\n  }\n}\n","export class EventHandler {\n  constructor(board, gameOverCallback) {\n    this.board = board;\n    this.gameOver = gameOverCallback;\n    this.handleTouchStart = this.handleTouchStart.bind(this);\n    this.handleTouchEnd = this.handleTouchEnd.bind(this);\n    this.handleTouchMove = this.handleTouchMove.bind(this);\n    this.keyDownHandler = this.keyDownHandler.bind(this);\n  }\n\n  handleTouchStart() {\n    event.preventDefault();\n    this.startX = event.changedTouches[0].screenX;\n    this.startY = event.changedTouches[0].screenY;\n  }\n\n  handleTouchEnd() {\n    event.preventDefault();\n\n    const endX = event.changedTouches[0].screenX;\n    const endY = event.changedTouches[0].screenY;\n\n    this.swipeHandler(endX - this.startX, endY - this.startY);\n  }\n\n  handleTouchMove() {\n    event.preventDefault();\n  }\n\n  keyDownHandler() {\n    let deltaX = 0; let deltaY = 0;\n\n    switch (event.key) {\n      case 'ArrowUp': deltaY = -1; break;\n      case 'ArrowDown': deltaY = 1; break;\n      case 'ArrowLeft': deltaX = -1; break;\n      case 'ArrowRight': deltaX = 1; break;\n      default: return;\n    }\n\n    this.swipeHandler(deltaX, deltaY);\n  }\n\n  swipeHandler(deltaX, deltaY) {\n    let gameContinue;\n    const swipe = this.board.swipe.bind(this.board);\n\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n      gameContinue = deltaX > 0 ? swipe('Right') : swipe('Left');\n    } else {\n      gameContinue = deltaY > 0 ? swipe('Down') : swipe('Up');\n    }\n\n    if (gameContinue === 'Win') {\n      this.gameOver(true);\n    }\n\n    if (gameContinue === 'Lose') {\n      this.gameOver(false);\n    }\n  }\n\n  start() {\n    document.addEventListener('keydown', this.keyDownHandler);\n\n    this.board.boardElement\n      .addEventListener('touchstart', this.handleTouchStart, false);\n\n    this.board.boardElement\n      .addEventListener('touchend', this.handleTouchEnd, false);\n\n    this.board.boardElement\n      .addEventListener('touchmove', this.handleTouchMove, false);\n  }\n\n  stop() {\n    document.removeEventListener('keydown', this.keyDownHandler);\n\n    this.board.boardElement\n      .removeEventListener('touchstart', this.handleTouchStart);\n\n    this.board.boardElement\n      .removeEventListener('touchend', this.handleTouchEnd);\n\n    this.board.boardElement\n      .removeEventListener('touchend', this.handleTouchMove);\n  }\n}\n","\nimport { Board } from './classes/Board.js';\nimport { StartButton } from './classes/StartButton.js';\nimport { ScoreCounter } from './classes/ScoreCounter.js';\nimport { Advertisement } from './classes/Advertisement.js';\nimport { Message } from './classes/Message.js';\nimport { EventHandler } from './classes/EventHandler.js';\n\nconst AD_NODE = document.querySelector('.advertisement');\nconst SCORE_COUNT_NODE = document.querySelector('.game-score');\nconst SCORE_RECORD_NODE = document.querySelector('.record-score');\nconst MESSAGE_NODE = document.querySelector('.message');\nconst START_BUTTON_NODE = document.querySelector('.tile--button');\nconst BOARD_NODE = document.querySelector('.board');\n\nconst startButton = new StartButton(START_BUTTON_NODE, stopGame, startGame);\nconst scoreCounter = new ScoreCounter(SCORE_COUNT_NODE, SCORE_RECORD_NODE);\nconst message = new Message(MESSAGE_NODE, scoreCounter, startGame, stopGame);\nconst board = new Board(BOARD_NODE, scoreCounter);\nconst eventHandler = new EventHandler(board, gameOver);\nconst advertisement = new Advertisement(AD_NODE);\n\nfunction startGame() {\n  advertisement.setAd();\n  board.resetLinkedCards();\n  board.firstSpawn(2);\n  startButton.toggle();\n\n  eventHandler.start();\n}\n\nfunction stopGame() {\n  advertisement.setGameInfo();\n  scoreCounter.reset();\n  board.clear();\n  startButton.toggle();\n\n  eventHandler.stop();\n}\n\nfunction gameOver(won) {\n  if (scoreCounter.counter > scoreCounter.record) {\n    scoreCounter.updateRecord();\n  }\n\n  scoreCounter.updateHTML();\n  message.showMessage(won);\n}\n"]}